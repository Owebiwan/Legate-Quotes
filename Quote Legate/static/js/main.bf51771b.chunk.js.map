{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["jsonQuotes","map","entry","colors","bgps","App","props","state","chrome","photo","quote","author","getQuote","bind","randomQuote","Math","floor","random","length","color","bgp","this","setState","name","onUse","animeT","transition","bodyP","backgroundImage","height","width","console","log","id","style","class","onClick","href","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"sMAIMA,G,WAAoBC,KAAI,SAACC,GAC7B,OAAOA,MAGLC,EAAS,CAAC,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,WAEjGC,EAAO,CAAC,mFAAoF,mFAAoF,mFAAoF,mFAAoF,mFAAoF,mFAAoF,mFAAoF,mFAAoF,mFAAoF,mFAAoF,mFAAoF,mFAAoF,mFAAoF,mFAAoF,mFAAoF,mFAAoF,mFAAoF,mFAAoF,mFAAoF,mFAAoF,oFA+D9oDC,E,kDA3Db,WAAYC,GAAO,IAAD,8BAChB,cAAMA,IACDC,MAAQ,CACXC,OAAQ,GACRC,MAAO,GACPC,MAAO,GACPC,OAAQ,IAEV,EAAKC,SAAW,EAAKA,SAASC,KAAd,gBARA,E,uDAahB,IAAIC,EAAcd,EAAWe,KAAKC,MAAMD,KAAKE,SAAWjB,EAAWkB,SAC/DC,EAAQhB,EAAOY,KAAKC,MAAMD,KAAKE,SAAWd,EAAOe,SACjDE,EAAMhB,EAAKW,KAAKC,MAAMD,KAAKE,SAAWb,EAAKc,SAEhDG,KAAKC,SAAS,CACTd,OAAQW,EACRV,MAAOW,EACPV,MAAOI,EAAYJ,MACnBC,OAAQG,EAAYS,S,+BAMxB,IAAIC,EAAQH,KAAKd,MAAME,MACnBgB,EAAS,CAACN,MAAOE,KAAKd,MAAMC,OAC5BkB,WAAY,4BAEZC,EAAQ,CAACC,gBAAgB,OAAD,OAASJ,EAAT,KAClBE,WAAY,kBACZG,OAAQ,QACRC,MAAO,SAIf,OAHMC,QAAQC,IAAIX,KAAKd,OACjBwB,QAAQC,MAGZ,yBAAKC,GAAG,UAAUC,MAAOP,GACzB,yBAAKM,GAAG,aACZ,yBAAKE,MAAM,aAAaF,GAAG,aAAaC,MAAOT,GAC7C,uBAAGU,MAAM,iBAAT,KAA8B,0BAAMF,GAAG,QAAQZ,KAAKd,MAAMG,QAE5D,yBAAKyB,MAAM,eAAeD,MAAOT,GAAjC,KACI,0BAAMQ,GAAG,UAAUZ,KAAKd,MAAMI,SAElC,yBAAKwB,MAAM,UAAUD,MAAOT,GAC1B,4BAAQU,MAAM,SAASF,GAAG,eAAc,uBAAGE,MAAM,mBACjD,4BAAQA,MAAM,SAASF,GAAG,YAAYG,QAASf,KAAKT,UAApD,UAAqE,uBAAGuB,MAAM,uBAGlF,yBAAKA,MAAM,UAAX,OAAwB,uBAAGE,KAAK,6BAAR,gB,GArDRC,IAAMC,WCDJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACL,kBAAC,EAAD,MACFC,SAASC,eAAe,SD4HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLzB,QAAQyB,MAAMA,EAAMC,a","file":"static/js/main.bf51771b.chunk.js","sourcesContent":["import React from 'react';\nimport './App.scss';\nimport Quotes from './Quotes.json'\n\nconst jsonQuotes = Quotes.map((entry) => {\n  return entry;\n});\n //Color that contrast the dark quote-box \nvar colors = ['#16a085', '#27ae60', '#f39c12', '#e74c3c', '#9b59b6', '#FB6964', \"#BDBB99\", \"#77B1A9\", \"#73A857\"];\n //Links to background images\n var bgps = [\"https://drive.google.com/uc?export=download&id=1uS8_8c11HXwdI9nYAJbSpN5pFO8msL9M\", \"https://drive.google.com/uc?export=download&id=1PCGHYrvZJslHIWJr0elByrUnjGNFJL5I\", \"https://drive.google.com/uc?export=download&id=1QwwZYBO_v1cROgK1Zw-37c5BKIHnL1oy\", \"https://drive.google.com/uc?export=download&id=1bjvB5um7pp_whz7BwCfuKXuqU_5KV0zz\", \"https://drive.google.com/uc?export=download&id=1QX3z4YyfjyP2TwpFRDd1BlLxiiatrle0\", \"https://drive.google.com/uc?export=download&id=1tuZfKWrpYjENu6xj26ekIo5eZlezQ_xS\", \"https://drive.google.com/uc?export=download&id=1928LzIePxLKKqVw5P7KQv5arJtIFbI1j\", \"https://drive.google.com/uc?export=download&id=1AFdll1vpv_Ra0fpSx40WpqxcmgMesOH-\", \"https://drive.google.com/uc?export=download&id=1F9wyhPg_RV2lXV08nvwiHXez78PTxYSR\", \"https://drive.google.com/uc?export=download&id=1-ghHJcxJU6L7dkskPA6X-AbMSOlAe8m6\", \"https://drive.google.com/uc?export=download&id=1UAa6r-k2C2RsxUnNqY78tRy4p1ai4Jev\", \"https://drive.google.com/uc?export=download&id=1dctE1qcaK7NAImB83BpKexQsGA0TlJw8\", \"https://drive.google.com/uc?export=download&id=1ohitVs0pv9d8j-eIF25q0R2KqCi_6MXD\", \"https://drive.google.com/uc?export=download&id=1b-Lndq2vDI7E82nZ1Ajf_L8krhqhRAbB\", \"https://drive.google.com/uc?export=download&id=1F3JZzr3b8uzr-Z-h-BFutAeyH0L94AF4\", \"https://drive.google.com/uc?export=download&id=1YXkih9KpU9kioS-ZHXGxeu-KgyAVEGhe\", \"https://drive.google.com/uc?export=download&id=1xabXfe4BfPJQAZJWEOKOqODAuZEzXEJx\", \"https://drive.google.com/uc?export=download&id=1OJsMgXObDfvzpNyHhwk9OIqtwUYd9wxf\", \"https://drive.google.com/uc?export=download&id=1OJFcFPptGZgOKx0LVyVviNSdW6frhl3l\", \"https://drive.google.com/uc?export=download&id=1lx3mI7LGzoOvSuv5iqvpC8YtaiIAe5mx\", \"https://drive.google.com/uc?export=download&id=1r3iiV993z-NP8kUzJ6qrdsZV8NgBb0Io\"];\n  \n\nclass App extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      chrome: \"\",\n      photo: \"\",\n      quote: \"\",\n      author: \"\"\n    }\n    this.getQuote = this.getQuote.bind(this);\n  }\n  \n\n  getQuote() {\n    var randomQuote = jsonQuotes[Math.floor(Math.random() * jsonQuotes.length)];\n    var color = colors[Math.floor(Math.random() * colors.length)];\n    var bgp = bgps[Math.floor(Math.random() * bgps.length)];\n   \n   this.setState({\n        chrome: color,\n        photo: bgp,\n        quote: randomQuote.quote,\n        author: randomQuote.name\n    })\n    \n  }\n  \n    render(){\n    var onUse = this.state.photo;\n    var animeT = {color: this.state.chrome,\n        transition: 'color 2.5s, opacity 2.5s',\n    }\n    var bodyP = {backgroundImage: `url(${onUse})`,\n              transition: 'all linear 2.5s',\n              height: '100vh',\n              width: '100vw',}\n            console.log(this.state)\n            console.log()\n  \n      return(\n        <div id=\"wrapper\" style={bodyP}>\n        <div id=\"quote-box\">\n    <div class=\"quote-text\" id=\"quote-text\" style={animeT}>\n      <i class=\"fa fa-pen-nib\"> </i><span id=\"text\">{this.state.quote}</span>\n    </div>\n    <div class=\"quote-author\" style={animeT}>\n      - <span id=\"author\">{this.state.author}</span>\n    </div>\n    <div class=\"buttons\" style={animeT}>\n      <button class=\"button\" id=\"tweet-quote\"><i class=\"fa fa-twitter\"></i></button>\n      <button class=\"button\" id=\"new-quote\" onClick={this.getQuote}>Reveal <i class=\"fa fa-book-open\"></i></button>\n    </div>\n  </div>\n  <div class=\"footer\"> by <a href=\"https://codepen.io/Beewan\">Beewan</a></div>\n        </div>\n      \n      );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}