{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["jsonQuotes","map","entry","colors","App","props","state","chrome","photo","quote","author","name","getQuote","bind","randomQuote","Math","floor","random","length","color","bgp","this","setState","onUse","process","quoteText","quoteAuthor","animeT","transition","animeP","backgroundColor","bodyP","backgroundImage","height","width","id","style","onLoad","className","target","href","onClick","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sMAIMA,G,WAAoBC,KAAI,SAACC,GAC7B,OAAOA,MAGLC,EAAS,CACX,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,WA2FaC,E,kDAvFb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,OAAQ,UACRC,MAAO,EACPC,MAAOT,EAAW,GAAGS,MACrBC,OAAQV,EAAW,GAAGW,MAExB,EAAKC,SAAW,EAAKA,SAASC,KAAd,gBARC,E,uDAYjB,IAAIC,EAAcd,EAAWe,KAAKC,MAAMD,KAAKE,SAAWjB,EAAWkB,SAC/DC,EAAQhB,EAAOY,KAAKC,MAAMD,KAAKE,SAAWd,EAAOe,SACjDE,EAAML,KAAKC,MAAsB,GAAhBD,KAAKE,UAE1BI,KAAKC,SAAS,CACZf,OAAQY,EACRX,MAAOY,EACPX,MAAOK,EAAYL,MACnBC,OAAQI,EAAYH,S,+BAKtB,IAAIY,EACFC,+BAA4CH,KAAKf,MAAME,MAAQ,OAC7DiB,EAAYJ,KAAKf,MAAMG,MACvBiB,EAAcL,KAAKf,MAAMI,OACzBiB,EAAS,CACXR,MAAOE,KAAKf,MAAMC,OAClBqB,WAAY,4BAEVC,EAAS,CACXC,gBAAiBT,KAAKf,MAAMC,OAC5BqB,WAAY,4BAEVG,EAAQ,CACVC,gBAAgB,OAAD,OAAST,EAAT,KACfK,WAAY,kBACZK,OAAQ,QACRC,MAAO,SAGT,OACE,yBAAKC,GAAG,UAAUC,MAAOL,EAAOM,OAAQhB,KAAKT,UAC3C,yBAAKuB,GAAG,aACN,yBAAKG,UAAU,aAAaH,GAAG,aAAaC,MAAOT,GACjD,uBAAGW,UAAU,iBAAb,KACA,0BAAMH,GAAG,QAAQd,KAAKf,MAAMG,QAE9B,yBAAK6B,UAAU,eAAeF,MAAOT,GAArC,KACI,0BAAMQ,GAAG,UAAUd,KAAKf,MAAMI,SAElC,yBAAK4B,UAAU,WACb,4BAAQA,UAAU,SAASH,GAAG,cAAcC,MAAOP,GACjD,uBACEU,OAAO,QACPC,KAAI,gDAA2Cf,EAA3C,aAAyDC,IAE7D,uBAAGY,UAAU,oBAGjB,4BACEA,UAAU,SACVH,GAAG,YACHC,MAAOP,EACPY,QAASpB,KAAKT,UAJhB,UAMS,uBAAG0B,UAAU,uBAI1B,yBAAKA,UAAU,UACb,uBACEA,UAAU,UACVC,OAAO,QACPC,KAAK,0CAEL,oD,GAhFME,IAAMC,WCRJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACL,kBAAC,EAAD,MACFC,SAASC,eAAe,SD4HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.4755f97b.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./App.scss\";\nimport Quotes from \"./Quotes.json\";\n\nconst jsonQuotes = Quotes.map((entry) => {\n  return entry;\n});\n//Color that contrast the dark quote-box\nvar colors = [\n  \"#16a085\",\n  \"#27ae60\",\n  \"#f39c12\",\n  \"#e74c3c\",\n  \"#9b59b6\",\n  \"#FB6964\",\n  \"#BDBB99\",\n  \"#77B1A9\",\n  \"#73A857\",\n];\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      chrome: \"#27ae60\",\n      photo: 1,\n      quote: jsonQuotes[1].quote,\n      author: jsonQuotes[1].name,\n    };\n    this.getQuote = this.getQuote.bind(this);\n  }\n\n  getQuote() {\n    var randomQuote = jsonQuotes[Math.floor(Math.random() * jsonQuotes.length)];\n    var color = colors[Math.floor(Math.random() * colors.length)];\n    var bgp = Math.floor(Math.random() * 20);\n\n    this.setState({\n      chrome: color,\n      photo: bgp,\n      quote: randomQuote.quote,\n      author: randomQuote.name,\n    });\n  }\n\n  render() {\n    var onUse =\n      process.env.PUBLIC_URL + \"/Quote-photos/\" + this.state.photo + \".png\";\n    var quoteText = this.state.quote;\n    var quoteAuthor = this.state.author;\n    var animeT = {\n      color: this.state.chrome,\n      transition: \"color 2.5s, opacity 2.5s\",\n    };\n    var animeP = {\n      backgroundColor: this.state.chrome,\n      transition: \"color 2.5s, opacity 2.5s\",\n    };\n    var bodyP = {\n      backgroundImage: `url(${onUse})`,\n      transition: \"all linear 2.5s\",\n      height: \"100vh\",\n      width: \"100vw\",\n    };\n\n    return (\n      <div id=\"wrapper\" style={bodyP} onLoad={this.getQuote}>\n        <div id=\"quote-box\">\n          <div className=\"quote-text\" id=\"quote-text\" style={animeT}>\n            <i className=\"fa fa-pen-nib\"> </i>\n            <span id=\"text\">{this.state.quote}</span>\n          </div>\n          <div className=\"quote-author\" style={animeT}>\n            - <span id=\"author\">{this.state.author}</span>\n          </div>\n          <div className=\"buttons\">\n            <button className=\"button\" id=\"tweet-quote\" style={animeP}>\n              <a\n                target=\"blank\"\n                href={`https://twitter.com/intent/tweet?text=${quoteText}--${quoteAuthor}`}\n              >\n                <i className=\"fa fa-twitter\"></i>\n              </a>\n            </button>\n            <button\n              className=\"button\"\n              id=\"new-quote\"\n              style={animeP}\n              onClick={this.getQuote}\n            >\n              Reveal <i className=\"fa fa-book-open\"></i>\n            </button>\n          </div>\n        </div>\n        <div className=\"footer\">\n          <a\n            className=\"contact\"\n            target=\"blank\"\n            href=\"https://linkedin.com/in/godwin-obamina\"\n          >\n            <button>by Beewan</button>\n          </a>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}